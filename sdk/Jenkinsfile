#!/usr/bin/groovy
// Copyright (C) Pelagicore AB 2018

void verifySDK(String upstream, String variant) {

    stage("Checkout repo") {
        // Checkout the git repository and refspec pointed to by jenkins
        checkout scm
        // Update the submodules in the repository.
        sh 'git submodule update --init'
    }

    String sdkDir = "/home/yoctouser/sdk"
    String archive_directory = "artifacts_${variant}"
    String sdkFilePattern = "pelux-glibc-*.sh"

    stage("Copying latest SDK ${variant}") {
        sh "rm -rf ${archive_directory}"

        copyArtifacts(projectName: "${upstream}",
                      selector: lastSuccessful(),
                      filter: "artifacts_${variant}/${sdkFilePattern}")
    }
    def customImage = docker.image("pelux/pelux-yocto:yoctouser")
    customImage.inside('-v $WORKSPACE:/workspace -v /var/yocto-cache:/var/yocto-cache --cap-add=NET_ADMIN --device=/dev/net/tun') {
        stage("Installing SDK ${variant}") {
            sh "/workspace/sdk/install_sdk ${sdkDir} /workspace/${archive_directory}"
        }

        stage("Building sample library ${variant}") {
            sh "/workspace/sdk/test_sdk ${sdkDir} template-library"
        }

        stage("Building sample service ${variant}") {
            sh "/workspace/sdk/test_sdk ${sdkDir} template-service"
        }
    }
}

parallel (
    'intel':        { node("Yocto") { verifySDK(params.SDK_JOB, "intel") } },
    'intel-qtauto': { node("Yocto") { verifySDK(params.SDK_JOB, "intel-qtauto") } },
    'rpi':          { node("Yocto") { verifySDK(params.SDK_JOB, "rpi") } },
    'rpi-qtauto':   { node("Yocto") { verifySDK(params.SDK_JOB, "rpi-qtauto") } }
)
